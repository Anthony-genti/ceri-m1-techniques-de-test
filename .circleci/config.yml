version: 2.1

# Intégration de l'orb Codecov pour simplifier le processus de publication de la couverture
orbs:
  codecov: codecov/codecov@4.0.1

jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:11.0

    steps:
      - checkout

      # Étape de compilation du projet
      - run:
          name: Build
          command: mvn -B -DskipTests clean package

      # Exécution des tests pour générer la couverture
      - run:
          name: Test with JaCoCo
          command: mvn test

      # Générez le rapport de couverture avec JaCoCo
      - run:
          name: Generate Coverage Report
          command: mvn jacoco:report


      # Publiez le rapport de couverture sur Codecov
      - codecov/upload:
          file: target/site/jacoco/jacoco.xml
          token: CODECOV_TOKEN

      - run:
          name: Run Checkstyle
          command: |
            mvn checkstyle:checkstyle
            if grep -q "<error " target/checkstyle-result.xml; then
              echo "Checkstyle Failed" > checkstyle-status.txt
            else
              echo "Checkstyle Passed" > checkstyle-status.txt
            fi

      - run:
          name: Generate Checkstyle Badge
          command: |
            CHECKSTYLE_STATUS=$(cat checkstyle-status.txt)
            if [ "$CHECKSTYLE_STATUS" = "Checkstyle Passed" ]; then
              curl -o checkstyle-badge.svg https://img.shields.io/badge/checkstyle-passed-brightgreen.svg
            else
              curl -o checkstyle-badge.svg https://img.shields.io/badge/checkstyle-failed-red.svg
            fi

  deploy-javadoc:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run:
          name: Generate Javadoc
          command: mvn javadoc:javadoc
      - run:
          name: Copy Javadoc to a Temporary Directory
          command: |
            mkdir -p javadoc-build
            cp -r target/site/apidocs/* javadoc-build/

      - run:
          name: Deploy to GitHub Pages
          command: |
            git config --global user.email "anthony.genti@alumni.univ-avignon.fr"
            git config --global user.name "Anthony-genti"
            
            git clone https://github.com/Anthony-genti/ceri-m1-techniques-de-test.git temp-repo
            cd temp-repo
            
            if ! git ls-remote --exit-code origin gh-pages; then
              git checkout --orphan gh-pages
              rm -rf *
              echo "Initial gh-pages branch" > index.html
              git add index.html
              git commit -m "Create gh-pages branch"
              git push origin gh-pages
            fi
            cd ..
              if [ -d "gh-pages" ]; then
                rm -rf gh-pages
              fi
              git clone --branch gh-pages https://github.com/Anthony-genti/ceri-m1-techniques-de-test.git gh-pages
              cd gh-pages
              rm -rf *
              cp -r ../javadoc-build/* .
              git add .
              git commit -m "Update Javadoc"
              git push origin gh-pages

workflows:
  sample:
    jobs:
      - build-and-test
      - javadoc:
          requires:
            - build-and-test
      - deploy:
          requires:
            - javadoc
          filters:
            branches:
              only: master